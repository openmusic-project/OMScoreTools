; OM File Header - Saved 2022/02/13 16:04:52
; (7.0 :patc (om-make-point 25 143) (om-make-point 1477 37) (om-make-point 782 682) "" 183 0 nil "2022/02/13 16:04:52")
; End File Header
(in-package :om)(load-lib-for (quote ("OMScoreTools")))(setf *om-current-persistent* (om-load-patch1 "05-gnuplot" (quote ((let ((box (om-load-editor-box1 "3DC" (quote 3dc) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 10)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Z coordinates (list)" "z-points" (list 0 0)) (om-load-inputfun (quote input-funbox) "precision (number)" "decimals" 0))) (om-make-point 412 130) (om-make-point 144 109) (let ((newobj (when (find-class (quote 3dc) nil) (let ((newbpf (3dc-from-list (quote (-3.0 -3.0 -1.0 0.0 0.0 -1.0 -2.0 1.0 1.0 3.0 2.0 1.0 -1.0 -2.0 -2.0 -2.0 -2.0 -2.0 -2.0 -2.0 -2.0 0.0 -2.0)) (quote (-1.0 0.0 0.0 1.0 -1.0 -1.0 2.0 2.0 0.0 0.0 -1.0 1.0 4.0 2.0 0.0 1.0 1.0 2.0 2.0 1.0 0.0 0.0 0.0)) (quote (0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 1.0 0.0 1.0 1.0 -1.0 -1.0 1.0 0.0 -1.0)) (quote 3dc) 4))) (setf (bpfcolor newbpf) (om-make-color 0.31363395 0.82012666 0.25265887)) (set-name newbpf "3DC") newbpf)))) (when newobj (setf (z-points newobj) (list 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 1.0 0.0 1.0 1.0 -1.0 -1.0 1.0 0.0 -1.0))) newobj) "x" nil (pairlis (quote (picture bg-color line-width room-size show-room show-axes mode winpos winsize)) (list nil nil 1.0 2 1 1 0 (om-make-point 0 0) (om-make-point 1069 904))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM->GNUPLOT" (quote om->gnuplot) (quote ((om-load-inputfun (quote input-funbox) "self" "SELF" (quote t)))) (om-make-point 405 412) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM->GNUPLOT" (quote om->gnuplot) (quote ((om-load-inputfun (quote input-funbox) "self" "SELF" (quote t)))) (om-make-point 196 538) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM->GNUPLOT" (quote om->gnuplot) (quote ((om-load-inputfun (quote input-funbox) "self" "SELF" (quote t)))) (om-make-point 400 266) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM->GNUPLOT" (quote om->gnuplot) (quote ((om-load-inputfun (quote input-funbox) "self" "SELF" (quote t)))) (om-make-point 82 252) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 164 92) (quote "3DC objects are also exported to the gnuplot editor. Export for printing is done through this interface.$") "" (om-make-point 473 253) nil (om-make-color 0 0 0) (om-make-font "Liberation Sans" 12 :family "Liberation Sans" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 134 85) (quote "If a list is given, this will batch to gnuplot. $Just set a name without extension.") "" (om-make-point 497 409) nil (om-make-color 0 0 0) (om-make-font "Liberation Sans" 12 :family "Liberation Sans" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 115 70) (quote "BPF-lib exports all BPFs contained into one graph") "" (om-make-point 282 546) nil (om-make-color 0 0 0) (om-make-font "Liberation Sans" 12 :family "Liberation Sans" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 132 85) (quote "Exports a BPF to gnuplot.$Use info to name your BPF or use preferences.$Color is also exported") "" (om-make-point 38 335) nil (om-make-color 0 0 0) (om-make-font "Liberation Sans" 12 :family "Liberation Sans" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF-LIB" (quote bpf-lib) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "list of BPF objects" "bpf-list" (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 100)) (quote (0 100)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj))))) (om-make-point 198 383) (om-make-point 102 124) (if (find-class (quote bpf-lib) nil) (make-instance (quote bpf-lib) :bpf-list (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 6 13 22 26 33 41 45 56 69 77 93 97 102)) (quote (0 81 62 71 26 65 31 64 27 13 72 27 64 63)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0.79688716 0.049729154 0.9663996)) (set-name newbpf "mybpf") newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 7 14 22 26 33 41 45 56 69 77 93 97 102)) (quote (0 23 23 54 26 48 31 47 27 13 72 27 64 63)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0.13858244 0.37660792 0.88969255)) (set-name newbpf "Mikhail") newbpf)))) (when newobj) newobj)) :from-file t)) "x" nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 0 0) (om-make-point 694 444))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 220 299) (om-make-point 96 43) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "toto" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 101 134) (om-make-point 85 93) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 6 13 22 26 33 41 45 56 69 77 93 97 102)) (quote (0 81 62 71 26 65 31 64 27 13 72 27 64 63)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0.79688716 0.049729154 0.9663996)) (set-name newbpf "toto") newbpf)))) (when newobj) newobj) "x" nil (pairlis (quote (winsize winpos picture)) (list (om-make-point 907 539) (om-make-point 0 0) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "Mikhail" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 270 133) (om-make-point 80 99) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 7 14 22 26 33 41 45 56 69 77 93 97 102)) (quote (0 23 23 54 26 48 31 47 27 13 72 27 64 63)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0.13858244 0.37660792 0.88969255)) (set-name newbpf "Mikhail") newbpf)))) (when newobj) newobj) "x" nil (pairlis (quote (winsize winpos picture)) (list (om-make-point 907 539) (om-make-point 0 0) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 259 100) (quote "Make sure you install gnuplot and check or set the path to the binary in the external tab of OM's$preferences.$The export format can be choosen from the second optional input or from preferences.") "" (om-make-point 218 12) nil (om-make-color 0 0 0) (om-make-font "Liberation Sans" 12 :family "Liberation Sans" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((10 0 1 0 nil 0) (9 0 2 0 nil 0) (0 0 3 0 nil 0) (11 0 4 0 nil 0) (10 0 9 1 nil 0) (11 0 10 0 nil 0) (12 0 10 1 nil 0))) nil 7.0))