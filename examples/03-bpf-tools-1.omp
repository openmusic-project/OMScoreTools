; OM File Header - Saved 2022/02/12 15:37:09
; (7.0 :patc (om-make-point 17 79) (om-make-point 0 0) (om-make-point 690 536) "" 183 0 "2022/02/05 18:16:12" "2022/02/12 15:37:00")
; End File Header
(in-package :om)(load-lib-for (quote ("OMScoreTools")))(setf *om-current-persistent* (om-load-patch1 "bpf-tools-1" (quote ((let ((box (om-load-boxcomment "comment" (om-make-point 150 76) (quote "Applying Serial forms on BPF") nil (om-make-point 313 71) nil (om-make-color 0 0 0) (om-make-font "Liberation Sans" 16.0D0 :family "Liberation Sans" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 456 360) (om-make-point 177 136) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1 18 26 35 40 43 46 56 66 70 73 80 84 90 99)) (quote (-82 -70 -32 -86 -67 -95 -11 -23 -66 -81 -30 -41 -30 -70 -34)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf "BPF") newbpf)))) (when newobj) newobj) "x" nil (pairlis (quote (winsize winpos picture)) (list (om-make-point 979 567) (om-make-point 0 0) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 256 360) (om-make-point 177 136) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1 18 26 35 40 43 46 56 66 70 73 80 84 90 99)) (quote (82 70 32 86 67 95 11 23 66 81 30 41 30 70 34)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf "BPF") newbpf)))) (when newobj) newobj) "x" nil (pairlis (quote (winsize winpos picture)) (list (om-make-point 979 567) (om-make-point 0 0) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 56 360) (om-make-point 177 136) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1 10 16 20 27 30 34 44 54 57 60 65 74 82 99)) (quote (-34 -70 -30 -41 -30 -81 -66 -23 -11 -95 -67 -86 -32 -70 -82)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf "BPF") newbpf)))) (when newobj) newobj) "x" nil (pairlis (quote (winsize winpos picture)) (list (om-make-point 979 567) (om-make-point 0 0) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 411 200) (om-make-point 63 28) (quote retro-rev) "retro-rev" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 291 200) (om-make-point 43 28) (quote retro) "retro" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 155 200) (om-make-point 58 28) (quote reverse) "reverse" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "BPF-TRANS" (quote bpf-trans) (quote ((om-load-inputfun (quote input-funbox) "self" "SELF" (quote t)) (om-load-inputfunmenu1 (quote input-funmenu) "path" "MODE" (quote retro-rev) (list (list "  reverse" (quote (quote reverse))) (list "  retro" (quote (quote retro))) (list "> retro-reverse" (quote (quote retro-rev))))))) (om-make-point 387 240) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "BPF-TRANS" (quote bpf-trans) (quote ((om-load-inputfun (quote input-funbox) "self" "SELF" (quote t)) (om-load-inputfunmenu1 (quote input-funmenu) "path" "MODE" (quote retro) (list (list "  reverse" (quote (quote reverse))) (list "> retro" (quote (quote retro))) (list "  retro-reverse" (quote (quote retro-rev))))))) (om-make-point 267 240) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 111 11) (om-make-point 177 136) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1 10 16 20 27 30 34 44 54 57 60 65 74 82 99)) (quote (34 70 30 41 30 81 66 23 11 95 67 86 32 70 82)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf "BPF") newbpf)))) (when newobj) newobj) "x" nil (pairlis (quote (winsize winpos picture)) (list (om-make-point 979 567) (om-make-point 0 0) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "BPF-TRANS" (quote bpf-trans) (quote ((om-load-inputfun (quote input-funbox) "self" "SELF" (quote t)) (om-load-inputfunmenu1 (quote input-funmenu) "path" "MODE" (quote reverse) (list (list "> reverse" (quote (quote reverse))) (list "  retro" (quote (quote retro))) (list "  retro-reverse" (quote (quote retro-rev))))))) (om-make-point 127 240) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((7 0 1 0 nil 0) (8 0 2 0 nil 0) (10 0 3 0 nil 0) (9 0 7 0 nil 0) (4 0 7 1 nil 0) (9 0 8 0 nil 0) (5 0 8 1 nil 0) (9 0 10 0 nil 0) (6 0 10 1 nil 0))) nil 7.0))
